cmake_policy(VERSION 3.0.0)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/../..")
set(ARDUINO_PACKAGE_MANAGER_PATH "${CMAKE_BINARY_DIR}/_pkg_mgr")
set(ARDUINO_TOOLCHAIN_DIR "${CMAKE_CURRENT_LIST_DIR}/../..")

set(CMAKE_PLATFORM_INFO_DIR ".")
include(CMakeDetermineSystem)
include(Arduino/System/PackagePathIndex)
include(Arduino/System/BoardToolchain)
InitializeArduinoPackagePathList()
#BoardManager_DownloadPackage(JSON_FILES_LIST _json_files
#	"https://downloads.arduino.cc/packages/package_index.json"
#	REQUIRED)
set(ARDUINO_BOARD_MANAGER_URL "https://raw.githubusercontent.com/MauricioJancic/Elemon/master/package_Elemon_index.json")
BoardManager_DownloadPackage(JSON_FILES_LIST _json_files
	"${ARDUINO_BOARD_MANAGER_URL}"
	REQUIRED)
set(ARDUINO_ENABLE_PACKAGE_MANAGER TRUE)
message("_json_files:${_json_files}")
IndexArduinoPackages(${_json_files})
IndexArduinoPackages()
packages_get_list(pkg_list)
message("pkg_list:${pkg_list}")

packages_find_platforms(pl_list JSON_FILES ${_json_files})
packages_find_platforms(pl_list)
message("pl_list:${pl_list}")
#foreach(pl IN LISTS pl_list)
#	packages_get_platform_property("${pl}" "/pkg_id" pkg_id)
#	packages_get_platform_property("${pl}" "/json_idx" json_idx)
#	packages_get_platform_property("${pl}" "/pl_prefix" pl_prefix)
#	packages_get_platform_property("${pl}" "/pl_path" pl_path)
#	packages_get_platform_property("${pl}" "/local_path" local_path)
#	packages_get_platform_property("${pl}" "/hw_path" hw_path)
#	packages_get_platform_property("${pl}" "name" name)
#	message("pl:${name}:${pl_path}:${local_path}:${hw_path}:${pl_prefix}:${json_idx}:${pkg_id}")
#endforeach()
#packages_find_tools("avr" tl_list JSON_FILES ${_json_files})
#message("tl_list:${tl_list}")
#packages_find_tools("avr" tl_list JSON_FILES ${_json_files})
#foreach(tl IN LISTS tl_list)
#	packages_get_tool_property("${tl}" "/pkg_id" pkg_id)
#	packages_get_tool_property("${tl}" "/json_idx" json_idx)
#	packages_get_tool_property("${tl}" "/tl_prefix" tl_prefix)
#	packages_get_tool_property("${tl}" "/tl_path" tl_path)
#	packages_get_tool_property("${tl}" "name" name)
#	message("tl:${name}:${tl_path}:${tl_prefix}:${json_idx}:${pkg_id}")
#endforeach()

if (NOT "${pl_list}" STREQUAL "")
	list(GET pl_list 0 _pl_id)
	packages_get_platform_property("${_pl_id}" "/pl_path" pl_path)
	if (NOT IS_DIRECTORY pl_path)
		BoardManager_InstallPlatform("${_pl_id}")
	endif()
endif()
#IndexArduinoPlatforms(ard_plat JSON_FILES ${_json_files})
#platforms_get_list(ard_plat pl_list)
#message("pl_list:${pl_list}")
#foreach(pl IN LISTS pl_list)
#	platforms_get_property(ard_plat "${pl}" "/pkg_id" pkg_id)
#	platforms_get_property(ard_plat "${pl}" "/json_idx" json_idx)
#	platforms_get_property(ard_plat "${pl}" "/pl_prefix" pl_prefix)
#	platforms_get_property(ard_plat "${pl}" "/path" pl_path)
#	platforms_get_property(ard_plat "${pl}" "/local_path" local_path)
#	platforms_get_property(ard_plat "${pl}" "/hw_path" hw_path)
#	platforms_get_property(ard_plat "${pl}" "name" name)
#	message("pl:${name}:${pl_path}:${local_path}:${hw_path}:${pl_prefix}:${json_idx}:${pkg_id}")
#endforeach()
IndexArduinoBoards(ard_boards JSON_FILES ${_json_files})
boards_get_list(ard_boards brd_list)
message("brd_list:${brd_list}")
#foreach(brd IN LISTS brd_list)
#	boards_get_property(ard_boards "${brd}" "/pl_id" pl_id)
#	boards_get_property(ard_boards "${brd}" "/sel_id" sel_id)
#	boards_get_property_list(ard_boards "${brd}" "name" name_prop)
#	boards_get_property(ard_boards "${brd}" "name" name)
#	boards_get_platform_property(ard_boards "${brd}" "name" pl_name)
#	boards_get_platform_property(ard_boards "${brd}" "/path" pl_path)
#	message("brd:${name}:${pl_name}:${name_prop}:${pl_id}:${sel_id}:${pl_path}")
#endforeach()
#set(ARDUINO_BOARD "uno2018")

#SelectArduinoBoard(ard_boards)
#SelectArduinoBoardEx(ard_boards uno2018 BOARD_OPTIONS_FILE "${CMAKE_BINARY_DIR}/test_options.cmake")
if (NOT "${brd_list}" STREQUAL "")
	list(GET brd_list 0 _board_id)
	SelectArduinoBoardEx(ard_boards "${_board_id}" BOARD_OPTIONS_FILE "${CMAKE_BINARY_DIR}/test_options.cmake")
endif()

# Display the selected menu options
foreach(_menu_opt_identifier IN LISTS ARDUINO_SEL_MENU_OPT_ID_LIST)
	message(STATUS "In Parent Selected option: ${_menu_opt_identifier}")
endforeach()

if (NOT "${ARDUINO_BOARD_IDENTIFIER}" STREQUAL "")
	SetupBoardToolchain(ard_boards "${ARDUINO_BOARD_IDENTIFIER}" "${CMAKE_BINARY_DIR}")
endif()

#_board_mgr_host_match("aarch64-linux-gnu" _priority)
#_board_mgr_host_match("all" _priority)
#_board_mgr_host_match("arm-linux-gnueabihf" _priority)
#_board_mgr_host_match("i386-apple-darwin11" _priority)
#_board_mgr_host_match("i686-linux-gnu" _priority)
#_board_mgr_host_match("i686-mingw32" _priority)
#_board_mgr_host_match("i686-pc-linux-gnu" _priority)
#_board_mgr_host_match("x86_64-apple-darwin" _priority)
#_board_mgr_host_match("x86_64-apple-darwin12" _priority)
#_board_mgr_host_match("x86_64-apple-darwin14" _priority)
#_board_mgr_host_match("x86_64-apple-darwin15" _priority)
#_board_mgr_host_match("x86_64-linux-gnu" _priority)
#_board_mgr_host_match("x86_64-pc-linux-gnu" _priority)
#_board_mgr_host_match("i386-apple-darwin" _priority)
#_board_mgr_host_match("x86_64-mingw32" _priority)

